schema {
  query: Queries
  mutation: Mutations
}

type Mutations {
  "Create\/update a doctor."
  setDoctor(input: SetDoctorInput!): SetDoctorPayload!
  "Add medical specialties."
  addSpecialties(input: AddSpecialtiesInput!): AddSpecialtiesPayload!
  "Add medical specialties."
  removeSpecialties(input: RemoveSpecialtiesInput!): RemoveSpecialtiesPayload!
}

type Queries {
  "Get information about all doctors."
  doctors(page: PaginationInput!): [Doctor!]!
  "Get information about a doctor."
  doctor("License number" license: String!): Doctor!
  "Get all medical specialties."
  specialties: [Specialties!]!
}

"Represents a doctor."
input DoctorInput {
  "Doctor Unique Identifier."
  id: String
  "Doctor license number."
  license: String!
  "First name."
  firstName: String!
  "Last name."
  lastName: String!
  "Email."
  email: String!
  "Contact numbers."
  contacts: [String!]!
  "Medical specialties."
  specialties: [String!]!
}

"Represents a doctor."
type Doctor {
  "Doctor Unique Identifier."
  id: String
  "Doctor license number."
  license: String!
  "First name."
  firstName: String!
  "Last name."
  lastName: String!
  "Email."
  email: String!
  "Contact numbers."
  contacts: [String!]!
  "Medical specialties."
  specialties: [String!]!
}

"Medical Specialties"
type Specialties {
  "Description"
  description: String!
}

input PaginationInput {
  take: Int!
  from: String
}

input SetDoctorInput {
  "The doctor."
  doctor: DoctorInput!
}

type SetDoctorPayload {
  doctor: Doctor
}

input AddSpecialtiesInput {
  "A list of medical specialties."
  descriptions: [String!]!
}

type AddSpecialtiesPayload {
  specialties: [Specialties!]
}

input RemoveSpecialtiesInput {
  "A medical specialty."
  description: String!
}

type RemoveSpecialtiesPayload {
  specialties: [Specialties!]
}